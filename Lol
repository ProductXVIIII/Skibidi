local ArrayField = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/ArrayField/main/Source.lua'))()

local Window = ArrayField:CreateWindow({
   Name = "ArrayField Example Window",
   LoadingTitle = "ArrayField Interface Suite",
   LoadingSubtitle = "by Arrays",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "ArrayField"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using ArrayField may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like ArrayField to get the key from
      Actions = {
            [1] = {
                Text = 'Click here to copy the key link <--',
                OnPress = function()
                    print('Pressed')
                end,
                }
            },
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

-- Display prompt window
Window:Prompt({
    Title = 'Interface Prompt',
    SubTitle = 'SubTitle',
    Content = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
    Actions = {
        Accept = {
            Name = 'Accept',
            Callback = function()
                print('Pressed')
            end,
        }
    }
})

-- Create a new tab for miscellaneous functionalities
local Tab = Window:CreateTab("Misc", 4483362458) -- Title, Image

local Section = Tab:CreateSection("No Clip", false) -- The 2nd argument indicates if it's only a Title and doesn't contain elements

-- Local variables
local noclip = false
local char = game.Players.LocalPlayer.Character
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")
local originalCanCollide = {} -- Table to store original CanCollide states
local keybind = nil -- Variable to store the user-defined keybind

-- Function to update noclip state
local function updateNoclip()
    if char then
        for _, v in pairs(char:GetChildren()) do
            pcall(function()
                if v:IsA("BasePart") then
                    if noclip then
                        -- Store the original CanCollide state if it's not already stored
                        if not originalCanCollide[v] then
                            originalCanCollide[v] = v.CanCollide
                        end
                        v.CanCollide = false
                    else
                        -- Restore the original CanCollide state if it was stored
                        if originalCanCollide[v] ~= nil then
                            v.CanCollide = originalCanCollide[v]
                            originalCanCollide[v] = nil
                        end
                    end
                end
            end)
        end
    end
end

-- Function to handle key press
local function onKeyPress(input)
    if noclip and input.KeyCode == keybind then
        noclip = not noclip
        updateNoclip()
    end
end

-- Function to set keybind from input box
local function setKeybind(text)
    local success, keyCode = pcall(function()
        return Enum.KeyCode[text:upper()]
    end)

    if success and keyCode then
        keybind = keyCode
        print("Keybind set to:", keyCode.Name)
    else
        print("Invalid keybind:", text)
    end
end

-- Toggle Callback
local Toggle = Tab:CreateToggle({
    Name = "No clip",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        noclip = Value
        updateNoclip()
    end,
})

-- Input Callback
local Input = Tab:CreateInput({
    Name = "No clip Keybind",
    PlaceholderText = "Input Keybind",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        setKeybind(Text)
    end,
})

-- Connect key press handler
userInputService.InputBegan:Connect(onKeyPress)

-- Main loop
runService.Stepped:Connect(function()
    updateNoclip()
end)

-- Additional section for flight functionality
local FlightSection = Tab:CreateSection("Flight", false) 

-- Variables for flight
local Players = game:GetService("Players")
local lp = Players.LocalPlayer

local flying = false
local bv, bav
local buttons = {W = false, S = false, A = false, D = false, Moving = false}
local flyKey = Enum.KeyCode.V -- Default keybind for fly
local flyToggle = false -- Variable to track toggle state
local flySpeed = 45 -- Default fly speed

local function StartFly()
    if not lp.Character then return end
    local c = lp.Character
    local h = c:FindFirstChildOfClass("Humanoid")
    if not h or flying then return end

    h.PlatformStand = true
    local cam = workspace.CurrentCamera

    bv = Instance.new("BodyVelocity")
    bav = Instance.new("BodyAngularVelocity")

    bv.Velocity, bv.MaxForce, bv.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000
    bav.AngularVelocity, bav.MaxTorque, bav.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000
    bv.Parent = c.Head
    bav.Parent = c.Head

    flying = true

    h.Died:connect(function() 
        EndFly()
    end)
end

local function EndFly()
    if bv then bv:Destroy() end
    if bav then bav:Destroy() end

    local c = lp.Character
    local h = c and c:FindFirstChildOfClass("Humanoid")
    if h then h.PlatformStand = false end

    flying = false
end

-- Handle user input for movement and flying activation
game:GetService("UserInputService").InputBegan:connect(function(input, GPE)
    if GPE then return end
    
    if flyToggle and input.KeyCode == flyKey then
        if flying then
            EndFly()
        else
            StartFly()
        end
    else
        for i, e in pairs(buttons) do
            if i ~= "Moving" and input.KeyCode == Enum.KeyCode[i] then
                buttons[i] = true
                buttons.Moving = true
            end
        end
    end
end)

game:GetService("UserInputService").InputEnded:connect(function(input, GPE)
    if GPE then return end
    local a = false
    for i, e in pairs(buttons) do
        if i ~= "Moving" then
            if input.KeyCode == Enum.KeyCode[i] then
                buttons[i] = false
            end
            if buttons[i] then a = true end
        end
    end
    buttons.Moving = a
end)

local function setVec(vec)
    return vec * (flySpeed / vec.Magnitude)
end

game:GetService("RunService").Heartbeat:connect(function(step)
    local c = lp.Character
    if flying and c and c.PrimaryPart then
        local p = c.PrimaryPart.Position
        local cf = workspace.CurrentCamera.CFrame
        local ax, ay, az = cf:toEulerAnglesXYZ()
        c:SetPrimaryPartCFrame(CFrame.new(p.x, p.y, p.z) * CFrame.Angles(ax, ay, az))
        if buttons.Moving then
            local t = Vector3.new()
            if buttons.W then t = t + (setVec(cf.lookVector)) end
            if buttons.S then t = t - (setVec(cf.lookVector)) end
            if buttons.A then t = t - (setVec(cf.rightVector)) end
            if buttons.D then t = t + (setVec(cf.rightVector)) end
            c:TranslateBy(t * step)
        end
    end
end)

-- Create a toggle for the fly script
local FlyToggle = Tab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Flag = "ToggleFly", -- Unique flag for saving settings
    Callback = function(Value)
        flyToggle = Value
        if Value then
            StartFly()
        else
            EndFly()
        end
    end,
})

-- Create a dropdown for keybind selection
local KeybindDropdown = Tab:CreateDropdown({
    Name = "Fly Keybind",
    Options = {"Q", "E", "R", "T", "Y", "U", "I", "O", "P", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "F", "G", "H", "J", "K", "L", "Z", "X", "C", "V", "B", "N", "M", "LeftArrow", "RightArrow", "UpArrow", "DownArrow"},
    CurrentOption = "V", -- Current selected option
    Flag = "KeybindDropdown", -- A flag for configuration saving
    Callback = function(Option)
        local keyMap = {
            Q = Enum.KeyCode.Q,
            E = Enum.KeyCode.E,
            R = Enum.KeyCode.R,
            T = Enum.KeyCode.T,
            Y = Enum.KeyCode.Y,
            U = Enum.KeyCode.U,
            I = Enum.KeyCode.I,
            O = Enum.KeyCode.O,
            P = Enum.KeyCode.P,
            ["1"] = Enum.KeyCode.One,
            ["2"] = Enum.KeyCode.Two,
            ["3"] = Enum.KeyCode.Three,
            ["4"] = Enum.KeyCode.Four,
            ["5"] = Enum.KeyCode.Five,
            ["6"] = Enum.KeyCode.Six,
            ["7"] = Enum.KeyCode.Seven,
            ["8"] = Enum.KeyCode.Eight,
            ["9"] = Enum.KeyCode.Nine,
            ["0"] = Enum.KeyCode.Zero,
            F = Enum.KeyCode.F,
            G = Enum.KeyCode.G,
            H = Enum.KeyCode.H,
            J = Enum.KeyCode.J,
            K = Enum.KeyCode.K,
            L = Enum.KeyCode.L,
            Z = Enum.KeyCode.Z,
            X = Enum.KeyCode.X,
            C = Enum.KeyCode.C,
            V = Enum.KeyCode.V,
            B = Enum.KeyCode.B,
            N = Enum.KeyCode.N,
            M = Enum.KeyCode.M,
            LeftArrow = Enum.KeyCode.LeftArrow,
            RightArrow = Enum.KeyCode.RightArrow,
            UpArrow = Enum.KeyCode.UpArrow,
            DownArrow = Enum.KeyCode.DownArrow
        }

        flyKey = keyMap[Option]
        print("Fly keybind set to:", flyKey.Name)
    end,
})

-- Create an input box for speed adjustment
local SpeedInput = Tab:CreateInput({
    Name = "Fly Speed",
    PlaceholderText = "Enter Fly Speed",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        local speed = tonumber(Text)
        if speed then
            flySpeed = speed
            print("Fly speed set to:", flySpeed)
        else
            print("Invalid speed:", Text)
        end
    end,
})

--[[
    WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
